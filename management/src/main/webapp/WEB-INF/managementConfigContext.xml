<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
    More robust deployments will want to use another option, such as the Jdbc version.

    The name of this should remain "userDetailsService" in order for Spring Security to find it.
     -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

    <sec:user-service id="userDetailsService">
        <sec:user name="simba" password="simba" authorities="ROLE_ADMIN" />
    </sec:user-service>

    <!--<bean id="userDetailsService"-->
    <!--class="org.acegisecurity.userdetails.jdbc.JdbcDaoImpl">-->
    <!--<property name="jdbcTemplate" ref="JdbcTemplate"> </property>-->
    <!--&lt;!&ndash; 配置查询条件 &ndash;&gt;-->
    <!--<property name="usersByUsernameQuery">-->
    <!--<value>-->
    <!--select t.username,t.password from cas_user t where t.username=?-->
    <!--</value>-->
    <!--</property>-->
    <!--<property name="authoritiesByUsernameQuery">-->
    <!--<value>-->
    <!--select t.username,t.auths from cas_auths t where t.username=?-->
    <!--</value>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<bean id="JdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
    <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->

    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>-->
    <!--<property name="url"><value>jdbc:mysql://localhost:3306/cas?characterEncoding=utf8</value></property>-->
    <!--<property name="username"><value>root</value></property>-->
    <!--<property name="password"><value>root</value></property>-->
    <!--</bean>-->

    <!-- 
    Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
    may go against a database or LDAP server.  The id should remain "attributeRepository" though.
     -->
    <bean id="attributeRepository"
          class="org.jasig.services.persondir.support.StubPersonAttributeDao">
        <property name="backingMap">
            <map>
                <entry key="uid" value="uid" />
                <entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
                <entry key="groupMembership" value="groupMembership" />
            </map>
        </property>
    </bean>

    <!--
    Sample, in-memory data store for the ServiceRegistry. A real implementation
    would probably want to replace this with the JPA-backed ServiceRegistry DAO
    The name of this bean should remain "serviceRegistryDao".
     -->
    <tx:annotation-driven transaction-manager="transactionManager" />


    <bean id="jpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:generateDdl="true"
          p:showSql="true" />

    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="factoryBean" />

    <bean id="factoryBean"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:jpaVendorAdapter-ref="jpaVendorAdapter"
          p:packagesToScan-ref="packagesToScan">
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">create-drop-update</prop>
                <prop key="hibernate.jdbc.batch_size">${database.batchSize}</prop>
                <prop key="hibernate.dialect">${database.hibernate.dialect}</prop>
            </props>
        </property>
    </bean>

    <!--
       | Injects EntityManager/Factory instances into beans with
       | @PersistenceUnit and @PersistenceContext
    -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <util:list id="packagesToScan">
        <value>org.jasig.cas.services</value>
        <value>org.jasig.cas.ticket</value>
        <value>org.jasig.cas.adaptors.jdbc</value>
    </util:list>

    <bean
            id="dataSource"
            class="org.apache.commons.dbcp.BasicDataSource"
            p:driverClassName="com.mysql.jdbc.Driver"
            p:url="jdbc:mysql://localhost:3306/cas?autoReconnect=true"
            p:password="root"
            p:username="root" />

    <bean id="serviceRegistryDao"
          class="org.jasig.cas.services.JpaServiceRegistryDaoImpl" />



    <!--<bean id="serviceRegistryDao"-->
    <!--class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">-->
    <!--<property name="registeredServices">-->
    <!--<list>-->
    <!--<bean class="org.jasig.cas.services.RegexRegisteredService">-->
    <!--<property name="id" value="0" />-->
    <!--<property name="name" value="HTTP and IMAP" />-->
    <!--<property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />-->
    <!--<property name="serviceId" value="^(https?|imaps?)://.*" />-->
    <!--<property name="evaluationOrder" value="10000001" />-->
    <!--</bean>-->
    <!--<bean class="org.jasig.cas.services.RegexRegisteredService">-->
    <!--<property name="id" value="1" />-->
    <!--<property name="name" value="back" />-->
    <!--<property name="description" value="Allows only back services" />-->
    <!--<property name="serviceId" value="^https?://back.*" />-->
    <!--<property name="evaluationOrder" value="10000002" />-->
    <!--</bean>-->
    <!--<bean class="org.jasig.cas.services.RegexRegisteredService">-->
    <!--<property name="id" value="2" />-->
    <!--<property name="name" value="localhost" />-->
    <!--<property name="description" value="Allows only localhost services" />-->
    <!--<property name="serviceId" value="^https?://localhost.*" />-->
    <!--<property name="evaluationOrder" value="10000003" />-->
    <!--</bean>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
</beans>
